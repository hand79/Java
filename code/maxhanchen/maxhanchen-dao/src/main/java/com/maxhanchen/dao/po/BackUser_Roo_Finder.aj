// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.maxhanchen.dao.po;

import com.maxhanchen.dao.po.BackUser;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect BackUser_Roo_Finder {
    
    public static Long BackUser.countFindBackUsersByRolesLike(String roles) {
        if (roles == null || roles.length() == 0) throw new IllegalArgumentException("The roles argument is required");
        roles = roles.replace('*', '%');
        if (roles.charAt(0) != '%') {
            roles = "%" + roles;
        }
        if (roles.charAt(roles.length() - 1) != '%') {
            roles = roles + "%";
        }
        EntityManager em = BackUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BackUser AS o WHERE LOWER(o.roles) LIKE LOWER(:roles)", Long.class);
        q.setParameter("roles", roles);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BackUser.countFindBackUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = BackUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BackUser AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<BackUser> BackUser.findBackUsersByRolesLike(String roles) {
        if (roles == null || roles.length() == 0) throw new IllegalArgumentException("The roles argument is required");
        roles = roles.replace('*', '%');
        if (roles.charAt(0) != '%') {
            roles = "%" + roles;
        }
        if (roles.charAt(roles.length() - 1) != '%') {
            roles = roles + "%";
        }
        EntityManager em = BackUser.entityManager();
        TypedQuery<BackUser> q = em.createQuery("SELECT o FROM BackUser AS o WHERE LOWER(o.roles) LIKE LOWER(:roles)", BackUser.class);
        q.setParameter("roles", roles);
        return q;
    }
    
    public static TypedQuery<BackUser> BackUser.findBackUsersByRolesLike(String roles, String sortFieldName, String sortOrder) {
        if (roles == null || roles.length() == 0) throw new IllegalArgumentException("The roles argument is required");
        roles = roles.replace('*', '%');
        if (roles.charAt(0) != '%') {
            roles = "%" + roles;
        }
        if (roles.charAt(roles.length() - 1) != '%') {
            roles = roles + "%";
        }
        EntityManager em = BackUser.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM BackUser AS o WHERE LOWER(o.roles) LIKE LOWER(:roles)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<BackUser> q = em.createQuery(queryBuilder.toString(), BackUser.class);
        q.setParameter("roles", roles);
        return q;
    }
    
    public static TypedQuery<BackUser> BackUser.findBackUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = BackUser.entityManager();
        TypedQuery<BackUser> q = em.createQuery("SELECT o FROM BackUser AS o WHERE o.username = :username", BackUser.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<BackUser> BackUser.findBackUsersByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = BackUser.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM BackUser AS o WHERE o.username = :username");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<BackUser> q = em.createQuery(queryBuilder.toString(), BackUser.class);
        q.setParameter("username", username);
        return q;
    }
    
}
