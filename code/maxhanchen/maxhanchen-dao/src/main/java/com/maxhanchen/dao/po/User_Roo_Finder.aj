// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.maxhanchen.dao.po;

import com.maxhanchen.dao.po.User;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect User_Roo_Finder {
    
    public static Long User.countFindUsersByRoleLike(String role) {
        if (role == null || role.length() == 0) throw new IllegalArgumentException("The role argument is required");
        role = role.replace('*', '%');
        if (role.charAt(0) != '%') {
            role = "%" + role;
        }
        if (role.charAt(role.length() - 1) != '%') {
            role = role + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE LOWER(o.role) LIKE LOWER(:role)", Long.class);
        q.setParameter("role", role);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<User> User.findUsersByRoleLike(String role) {
        if (role == null || role.length() == 0) throw new IllegalArgumentException("The role argument is required");
        role = role.replace('*', '%');
        if (role.charAt(0) != '%') {
            role = "%" + role;
        }
        if (role.charAt(role.length() - 1) != '%') {
            role = role + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.role) LIKE LOWER(:role)", User.class);
        q.setParameter("role", role);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByRoleLike(String role, String sortFieldName, String sortOrder) {
        if (role == null || role.length() == 0) throw new IllegalArgumentException("The role argument is required");
        role = role.replace('*', '%');
        if (role.charAt(0) != '%') {
            role = "%" + role;
        }
        if (role.charAt(role.length() - 1) != '%') {
            role = role + "%";
        }
        EntityManager em = User.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM User AS o WHERE LOWER(o.role) LIKE LOWER(:role)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<User> q = em.createQuery(queryBuilder.toString(), User.class);
        q.setParameter("role", role);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.username = :username", User.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = User.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM User AS o WHERE o.username = :username");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<User> q = em.createQuery(queryBuilder.toString(), User.class);
        q.setParameter("username", username);
        return q;
    }
    
}
